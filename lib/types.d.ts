export declare type IDeepPartial<T> = T extends object ? {
    [P in keyof T]?: IDeepPartial<T[P]>;
} : T;
export declare type IPercent = `${number}%`;
export declare type IPx = `${number}px`;
export declare type IRem = `${number}rem`;
export declare type IAbsoluteSize = IPx | IRem;
export declare type ISize = IPercent | IAbsoluteSize;
export declare type ISizeRange = '8xs' | '7xs' | '6xs' | '5xs' | '4xs' | '3xs' | 'xxs' | 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | '3xl' | '4xl' | '5xl' | '6xl' | '7xl' | '8xl';
export interface ISizeRangeNumber {
    '8xs': number;
    '7xs': number;
    '6xs': number;
    '5xs': number;
    '4xs': number;
    '3xs': number;
    xxs: number;
    xs: number;
    s: number;
    m: number;
    l: number;
    xl: number;
    xxl: number;
    '3xl': number;
    '4xl': number;
    '5xl': number;
    '6xl': number;
    '7xl': number;
    '8xl': number;
}
export interface ISizeRangeAbsoluteSize {
    '8xs': IAbsoluteSize;
    '7xs': IAbsoluteSize;
    '6xs': IAbsoluteSize;
    '5xs': IAbsoluteSize;
    '4xs': IAbsoluteSize;
    '3xs': IAbsoluteSize;
    xxs: IAbsoluteSize;
    xs: IAbsoluteSize;
    s: IAbsoluteSize;
    m: IAbsoluteSize;
    l: IAbsoluteSize;
    xl: IAbsoluteSize;
    xxl: IAbsoluteSize;
    '3xl': IAbsoluteSize;
    '4xl': IAbsoluteSize;
    '5xl': IAbsoluteSize;
    '6xl': IAbsoluteSize;
    '7xl': IAbsoluteSize;
    '8xl': IAbsoluteSize;
}
export interface ISizeRangeSize {
    '8xs': ISize;
    '7xs': ISize;
    '6xs': ISize;
    '5xs': ISize;
    '4xs': ISize;
    '3xs': ISize;
    xxs: ISize;
    xs: ISize;
    s: ISize;
    m: ISize;
    l: ISize;
    xl: ISize;
    xxl: ISize;
    '3xl': ISize;
    '4xl': ISize;
    '5xl': ISize;
    '6xl': ISize;
    '7xl': ISize;
    '8xl': ISize;
}
export declare type IAlignItems = 'baseline' | 'center' | 'flex-end' | 'flex-start' | 'stretch';
export declare type IAlignSelf = 'auto' | 'baseline' | 'center' | 'flex-end' | 'flex-start' | 'stretch';
export declare type IFlexDirection = 'column' | 'column-reverse' | 'row' | 'row-reverse';
export declare type ICssFontWeight = 'bold' | 'bolder' | 'lighter' | 'normal';
export declare type IJustifyContent = 'center' | 'flex-end' | 'flex-start' | 'space-around' | 'space-between' | 'space-evenly';
export declare type IOverflow = 'auto' | 'hidden' | 'scroll' | 'visible';
export declare type ITextAlign = 'center' | 'end' | 'justify' | 'justify-all' | 'left' | 'match-parent' | 'right' | 'start';
export declare type IWordBreak = 'break-all' | 'break-word' | 'keep-all' | 'normal';
export declare type IBaseFlexElement = 'article' | 'aside' | 'div' | 'figure' | 'footer' | 'header' | 'main' | 'nav' | 'section' | 'summary';
export declare type IBorderRadius = ISizeRange;
export declare type IBorderWidth = ISizeRange;
export declare type IBaseColor = 'primary' | 'secondary' | 'tertiary' | 'quaternary' | 'quinary' | 'senary' | 'warning' | 'error' | 'header' | 'footer' | 'modal' | 'primaryText' | 'secondaryText' | 'tertiaryText' | 'quaternaryText' | 'quinaryText' | 'senaryText' | 'warningText' | 'errorText' | 'headerText' | 'footerText' | 'modalText' | 'primaryBackground' | 'secondaryBackground' | 'tertiaryBackground' | 'quaternaryBackground' | 'quinaryBackground' | 'senaryBackground' | 'warningBackground' | 'errorBackground' | 'headerBackground' | 'footerBackground' | 'modalBackground' | 'onPrimary' | 'onSecondary' | 'onTertiary' | 'onQuaternary' | 'onQuinary' | 'onSenary' | 'onWarning' | 'onError' | 'onHeader' | 'onFooter' | 'onModal' | 'primaryBorder' | 'secondaryBorder' | 'tertiaryBorder' | 'quaternaryBorder' | 'senaryBorder' | 'warningBorder' | 'errorBorder' | 'headerBorder' | 'footerBorder' | 'modalBorder';
export declare type IColorCode = `#${string}` | `hsl(${number}, ${number}%, ${number}%)` | `hsla(${number}, ${number}%, ${number}%, ${number})` | `rgb(${number}, ${number}, ${number})` | `rgb(${number}%, ${number}%, ${number}%)` | `rgb(${number} ${number} ${number})` | `rgb(${number}% ${number}% ${number}%)` | `rgb(${number}, ${number}, ${number}, ${number})` | `rgb(${number}, ${number}, ${number}, ${number}%)` | `rgb(${number}%, ${number}%, ${number}%, ${number})` | `rgb(${number}%, ${number}%, ${number}%, ${number}%)` | `rgb(${number} ${number} ${number} / ${number})` | `rgb(${number} ${number} ${number} / ${number}%)` | `rgb(${number}% ${number}% ${number}% / ${number})` | `rgb(${number}% ${number}% ${number}% / ${number}%)` | `rgba(${number}, ${number}, ${number})` | `rgba(${number}%, ${number}%, ${number}%)` | `rgba(${number} ${number} ${number})` | `rgba(${number}% ${number}% ${number}%)` | `rgba(${number}, ${number}, ${number}, ${number})` | `rgba(${number}, ${number}, ${number}, ${number}%)` | `rgba(${number}%, ${number}%, ${number}%, ${number})` | `rgba(${number}%, ${number}%, ${number}%, ${number}%)` | `rgba(${number} ${number} ${number} / ${number})` | `rgba(${number} ${number} ${number} / ${number}%)` | `rgba(${number}% ${number}% ${number}% / ${number})` | `rgba(${number}% ${number}% ${number}% / ${number}%)`;
export declare type IColorKeyword = 'currentColor' | 'inherit' | 'transparent';
export declare type IColorName = 'aliceblue' | 'antiquewhite' | 'aqua' | 'aquamarine' | 'azure' | 'beige' | 'bisque' | 'black' | 'blanchedalmond' | 'blue' | 'blueviolet' | 'brown' | 'burlywood' | 'cadetblue' | 'chartreuse' | 'chocolate' | 'coral' | 'cornflowerblue' | 'cornsilk' | 'crimson' | 'cyan' | 'darkblue' | 'darkcyan' | 'darkgoldenrod' | 'darkgray' | 'darkgreen' | 'darkgrey' | 'darkkhaki' | 'darkmagenta' | 'darkolivegreen' | 'darkorange' | 'darkorchid' | 'darkred' | 'darksalmon' | 'darkseagreen' | 'darkslateblue' | 'darkslategray' | 'darkslategrey' | 'darkturquoise' | 'darkviolet' | 'deeppink' | 'deepskyblue' | 'dimgray' | 'dimgrey' | 'dodgerblue' | 'firebrick' | 'floralwhite' | 'forestgreen' | 'fuchsia' | 'gainsboro' | 'ghostwhite' | 'gold' | 'goldenrod' | 'gray' | 'green' | 'greenyellow' | 'grey' | 'honeydew' | 'hotpink' | 'indianred' | 'indigo' | 'ivory' | 'khaki' | 'lavender' | 'lavenderblush' | 'lawngreen' | 'lemonchiffon' | 'lightblue' | 'lightcoral' | 'lightcyan' | 'lightgoldenrodyellow' | 'lightgray' | 'lightgreen' | 'lightgrey' | 'lightpink' | 'lightsalmon' | 'lightseagreen' | 'lightskyblue' | 'lightslategray' | 'lightslategrey' | 'lightsteelblue' | 'lightyellow' | 'lime' | 'limegreen' | 'linen' | 'magenta' | 'maroon' | 'mediumaquamarine' | 'mediumblue' | 'mediumorchid' | 'mediumpurple' | 'mediumseagreen' | 'mediumslateblue' | 'mediumspringgreen' | 'mediumturquoise' | 'mediumvioletred' | 'midnightblue' | 'mintcream' | 'mistyrose' | 'moccasin' | 'navajowhite' | 'navy' | 'oldlace' | 'olive' | 'olivedrab' | 'orange' | 'orangered' | 'orchid' | 'palegoldenrod' | 'palegreen' | 'paleturquoise' | 'palevioletred' | 'papayawhip' | 'peachpuff' | 'peru' | 'pink' | 'plum' | 'powderblue' | 'purple' | 'rebeccapurple' | 'red' | 'rosybrown' | 'royalblue' | 'saddlebrown' | 'salmon' | 'sandybrown' | 'seagreen' | 'seashell' | 'sienna' | 'silver' | 'skyblue' | 'slateblue' | 'slategray' | 'slategrey' | 'snow' | 'springgreen' | 'steelblue' | 'tan' | 'teal' | 'thistle' | 'tomato' | 'turquoise' | 'violet' | 'wheat' | 'white' | 'whitesmoke' | 'yellow' | 'yellowgreen';
export declare type ICssColor = IColorCode | IColorKeyword | IColorName;
export declare type IColor = IBaseColor | ICssColor;
export declare type IDistance = ISizeRange;
export declare type IFlipDirection = 'flip' | 'flip-reverse' | 'reverse';
export declare type IFontSize = ISizeRange;
export declare type IFontStyle = 'italic' | 'normal';
export declare type IFontWeight = 'bold' | 'normal' | 'semibold';
export declare type IHeight = ISizeRange;
export declare type IStyleElement = 'b' | 'cite' | 'code' | 'em' | 'i' | 'kbd' | 'mark' | 's' | 'samp' | 'small' | 'span' | 'strong' | 'sub' | 'sup' | 'u' | 'var';
export declare type ITextElement = 'h1' | 'h2' | 'h3' | 'h4' | 'h5' | 'h6' | 'p';
export declare type IViewportThreshold = ISizeRange;
export declare type IWidth = ISizeRange;
export interface IEasyFlexTheme {
    border: {
        radius: ISizeRangeAbsoluteSize;
        width: ISizeRangeAbsoluteSize;
    };
    color: {
        primary: ICssColor;
        secondary: ICssColor;
        tertiary: ICssColor;
        quaternary: ICssColor;
        quinary: ICssColor;
        senary: ICssColor;
        warning: ICssColor;
        error: ICssColor;
        header: ICssColor;
        footer: ICssColor;
        modal: ICssColor;
        primaryText: ICssColor;
        secondaryText: ICssColor;
        tertiaryText: ICssColor;
        quaternaryText: ICssColor;
        quinaryText: ICssColor;
        senaryText: ICssColor;
        warningText: ICssColor;
        errorText: ICssColor;
        headerText: ICssColor;
        footerText: ICssColor;
        modalText: ICssColor;
        primaryBackground: ICssColor;
        secondaryBackground: ICssColor;
        tertiaryBackground: ICssColor;
        quaternaryBackground: ICssColor;
        quinaryBackground: ICssColor;
        senaryBackground: ICssColor;
        warningBackground: ICssColor;
        errorBackground: ICssColor;
        headerBackground: ICssColor;
        footerBackground: ICssColor;
        modalBackground: ICssColor;
        onPrimary: ICssColor;
        onSecondary: ICssColor;
        onTertiary: ICssColor;
        onQuaternary: ICssColor;
        onQuinary: ICssColor;
        onSenary: ICssColor;
        onWarning: ICssColor;
        onError: ICssColor;
        onHeader: ICssColor;
        onFooter: ICssColor;
        onModal: ICssColor;
        primaryBorder: ICssColor;
        secondaryBorder: ICssColor;
        tertiaryBorder: ICssColor;
        quaternaryBorder: ICssColor;
        quinaryBorder: ICssColor;
        senaryBorder: ICssColor;
        warningBorder: ICssColor;
        errorBorder: ICssColor;
        headerBorder: ICssColor;
        footerBorder: ICssColor;
        modalBorder: ICssColor;
    };
    distance: ISizeRangeAbsoluteSize;
    font: {
        size: ISizeRangeSize;
        weight: {
            light: ICssFontWeight | number;
            normal: ICssFontWeight | number;
            semibold: ICssFontWeight | number;
            bold: ICssFontWeight | number;
        };
    };
    modal: {
        backgroundColor: ICssColor;
        blur: IAbsoluteSize;
        blurElementId: string;
        containerElementId: string;
    };
    size: {
        height: ISizeRangeAbsoluteSize;
        width: ISizeRangeAbsoluteSize;
    };
    viewport: {
        fallbackThreshold: number;
        threshold: ISizeRangeNumber;
    };
}
export declare type IPartialEasyFlexTheme = IDeepPartial<IEasyFlexTheme>;
